# Это классический алгоритм поиска элемента в отсортированном массиве (векторе),
# использующий дробление массива на половины. В общем случае для списка из n элементов
# бинарный поиск выполняется за log 2 n шагов, тогда как простой поиск будет выполнен
# за n шагов. Бинарный поиск работает только в том случае, если список отсортирован.

# Временная сложность - O(log n)
# Вычислительная сложность - O(1)

# # Для сортировки списка:
# lst = [3, 1, 8, 5, 10]
# lst.sort()
# print(lst)  # [1, 3, 5, 8, 10]


def binary_search(array, item):
    """
    lst - массив, в котором ведется поиск,
    item - элемент, который необходимо найти
    """
    low = 0  # В переменных low и high хранятся границы той части списка, в которой выполняется поиск
    high = len(array) - 1
    while low <= high:  # Пока эта часть не сократится до одного элемента....
        mid = int((low + high) / 2)  # ... проверяем средний элемент
        guess = array[mid]
        if guess == item:  # Значение найдено
            return mid
        if guess > item:  # Много
            high = mid - 1
        else:  # Мало
            low = mid + 1
    return None  # Значения не существует


if __name__ == '__main__':
    my_list = [1, 3, 5, 7, 9, 12, 25, 44, 82, 128]
    print(binary_search(my_list, 3))  # 1
    print(binary_search(my_list, -1))  # None
