# Реализовать алгоритм сортировки выбором. Алгоритм состоит из следующих шагов:
# 1. найти наименьший элемент в массиве
# 2. поменять местами его и первый элемент в массиве
# 3. найти следующий наименьший элемент в массиве
# 4. и поменять местами его и второй элемент массива
# 5. продолжать это пока весь массив не будет отсортирован
# arr = [0,3,24,2,3,7]
# // здесь реализованный алгоритм
# // на выходе должен получиться список, содержащий [0, 2, 3, 3, 7, 24]

# Для реализации алгоритма сортировки лучше начать буквально следуя пунктам алгоритма (в условии задачи). B вместо min
# лучше написать свою функцию поиска минимального значения в том списке, который ей передается (чтоб она возвращала
# не само минимальное значение, а его индекс).
# Например, для i-го элемента arr первые два пункта можно реализовать так:
#
# найти наименьший элемент в массиве: i_min = my_min(arr[i+1:])
# поменять местами его и первый элемент в массиве: arr[i], arr[i_min] = arr[i_min], arr[i]
# где my_min - это ваша функция поиска индекса минимального элемента.

# def my_min(cut, min_index):  # arr[i:], i_min
#     min_index = cut.index(min(cut))
#     print(f"Минимум на отрезке {cut} равен {cut[min_index]}")  # 2
#     print(f"Индекс минимума на отрезке {cut} равен {min_index}")  # 2
#     return min_index
#
#
# arr = [0, 3, 24, 2, 3, 7]
# i = 0  # Индекс первого элемента
# i_min = 0  # Индекс элемента с минимальным значением
#
# while i <= len(arr) - 1:
#     print(f"\nСписок на интервале от {i+1}ого элемента до замены:    {arr}")
#     i_min = my_min(arr[i:], i_min)  # Находим индекс наименьшего элемента на отрезке списка [3, 24, 2, 3, 7]
#     print(f"Заменяемый элемент на отрезке {arr[i:]} равен {arr[i]}")  # 3
#     print(f"Индекс заменяемого элемента в списке {arr} равен {i}")  # 1
#     arr[i], arr[i_min + i] = arr[i_min + i], arr[i]  # [0, 3, 24, 2, 3, 7] => [0, 2, 24, 3, 3, 7]
#     print(f"Список на интервале от {i+1}ого элемента после замены: {arr}")
#     i += 1
#
# def my_min(cut, min_index):  # arr[i:], i_min
#     min_index = cut.index(min(cut))
#     print(f"Минимум на отрезке {cut} равен {cut[min_index]}")  # 2
#     print(f"Индекс минимума на отрезке {cut} равен {min_index}")  # 2
#     return min_index

# Решение без метода min
# Чтобы найти сразу i минимальный элемент, мы должны сделать следующее:
# Пусть i_min хранит индекс минимального элемента. Для начала (пока мы не знаем, какой элемент минимальный)
# пусть i_min = 0. Затем идем по списку пока j < len(cut). Если cut[j] < cut[i_min], то i_min = j. В итоге i_min
# окажется индексом минимального элемента. Можно вместе с i_min завести переменную min_value, в которую записывать
# текущее минимальное значение, чтоб сравнивать cut[j] и min_value.
def my_min(cut):
    j = 0  # Индекс элемента с минимальным значением
    min_index = 0  # Зануляем i_min
    while j < len(cut):
        if cut[j] < cut[min_index]:
            min_index = j
        j += 1
    print(f"Минимум на отрезке {cut} равен {cut[min_index]}")
    print(f"Индекс минимума на отрезке {cut} равен {min_index}")
    return min_index


arr = [0, 3, 24, 2, 3, 7]

i = 0  # Индекс первого элемента
i_min = 0  # Индекс элемента с минимальным значением

while i < len(arr) - 1:
    print(f"\nСписок на интервале от {i+1}ого элемента до замены:    {arr}")
    i_min = my_min(arr[i:])  # Находим индекс наименьшего элемента на отрезке списка
    print(f"Заменяемый элемент на отрезке {arr[i:]} равен {arr[i]}")
    print(f"Индекс заменяемого элемента в списке {arr} равен {i}")
    arr[i], arr[i_min + i] = arr[i_min + i], arr[i]
    print(f"Список на интервале от {i+1}ого элемента после замены: {arr}")
    i += 1
